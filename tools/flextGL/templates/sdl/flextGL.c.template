@require(passthru, functions, enums, options, version, extensions)
/* WARNING: This file was automatically generated */
/* Do not edit. */

#include "flextGL.h"
#include "core/sdl/SDLSystem.h"


#ifdef __cplusplus
extern "C" {
#endif


void flextLoadOpenGLFunctions(void);

/**
 * \return -1 on error, 0 on success
 * \sa SDL_GetError
 */
int flextInit(void)
{
    @if version.int_value() >= 32 and not version.profile == 'core':
    GLint profile;
    @end
    int major;
    int minor;

    SDL_GL_GetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, &major);
    SDL_GL_GetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, &minor);

    flextLoadOpenGLFunctions();

    /* --- Check for minimal version and profile --- */

    if (major * 10 + minor < @version.int_value()!s) {
        return SDL_SetError("OpenGL context hasn't the expected version @version.major!s.@version.minor!s.");
    }

    @if version.int_value() >= 32 and not version.profile == 'core':
    glGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profile);

    if ((profile & GL_CONTEXT_COMPATIBILITY_PROFILE_BIT) == 0) {
        return SDL_SetError("This application requires a compatibility profile");
    }
    @end

    /* --- Check for extensions --- */

    @for extension,required in extensions:
    @if required:
    if (!SDL_GL_ExtensionSupported("GL_@extension")) {
        return SDL_SetError("OpenGL extension @extension not supported.");
    }
    @else:
    if (SDL_GL_ExtensionSupported("GL_@extension")) {
        FLEXT_@extension = GL_TRUE;
    }
    @end

    @end

    return 0;
}

void flextLoadOpenGLFunctions(void)
{
    /* --- Function pointer loading --- */

    @for category,funcs in functions:
    /* GL_@category */

    @for f in funcs:
    glpf@f.name = (PFNGL@f.name.upper()_PROC*)SDL_GL_GetProcAddress("gl@f.name");
    @end

    @end
}

/* ----------------------- Extension flag definitions ---------------------- */
@for extension,required in extensions:
int FLEXT_@extension = GL_FALSE;
@end

/* ---------------------- Function pointer definitions --------------------- */

@for category,funcs in functions:
@if len(funcs) > 0:
/* GL_@category */

@for f in funcs:
PFNGL@f.name.upper()_PROC* glpf@f.name = NULL;
@end

@end
@end

#ifdef __cplusplus
}
#endif
